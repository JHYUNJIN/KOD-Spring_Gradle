USE KOD;

-- 분기 통계
SELECT 
    SALES_STATISTICS.YEAR AS '년',
    SALES_STATISTICS.QUARTER AS '분기', 
    SALES_STATISTICS.PRODUCT_ID as '상품ID',
    SALES_STATISTICS.PRODUCT_NAME AS '상품명',
    SALES_STATISTICS.PRODUCT_PRICE AS '상품가격',
    SALES_STATISTICS.PRODUCT_SALES_QUANTITY AS '판매수량',
    SALES_STATISTICS.PRODUCT_SALES_REVENUE AS '상품매출',
    QUARTER_AVENUE.QUARTER_AVENUE AS '분기매출'
FROM (
    SELECT 
        YEAR(OL.ORDERLIST_DATE) AS 'YEAR',
        QUARTER(OL.ORDERLIST_DATE) AS 'QUARTER',
        P.PRODUCT_ID,
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE,
        SUM(OC.ORDERCONTENT_CNT) AS 'PRODUCT_SALES_QUANTITY',
        SUM(P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT) AS 'PRODUCT_SALES_REVENUE'
    FROM 
        ORDERLIST OL
    JOIN 
        ORDERCONTENT OC ON OL.ORDERLIST_ID = OC.ORDERLIST_ID
    JOIN 
        PRODUCT P ON OC.PRODUCT_ID = P.PRODUCT_ID
    GROUP BY 
        YEAR(OL.ORDERLIST_DATE),
        QUARTER(OL.ORDERLIST_DATE),
        P.PRODUCT_ID,
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE
) AS SALES_STATISTICS
JOIN (
    SELECT 
        YEAR(OL.ORDERLIST_DATE) AS 'YEAR',
        QUARTER(OL.ORDERLIST_DATE) AS 'QUARTER',
        SUM(P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT) AS 'QUARTER_AVENUE'
    FROM 
        ORDERLIST OL
    JOIN 
        ORDERCONTENT OC ON OL.ORDERLIST_ID = OC.ORDERLIST_ID
    JOIN 
        PRODUCT P ON OC.PRODUCT_ID = P.PRODUCT_ID
    GROUP BY 
        YEAR(OL.ORDERLIST_DATE),
        QUARTER(OL.ORDERLIST_DATE)
) AS QUARTER_AVENUE ON SALES_STATISTICS.YEAR = QUARTER_AVENUE.YEAR AND SALES_STATISTICS.QUARTER = QUARTER_AVENUE.QUARTER
ORDER BY 
    SALES_STATISTICS.YEAR,
    SALES_STATISTICS.QUARTER,
    SALES_STATISTICS.PRODUCT_SALES_REVENUE DESC;



-- 분기별 상품매출 순위
SELECT 
    YEAR(OL.ORDERLIST_DATE) AS '년',
    QUARTER(OL.ORDERLIST_DATE) AS '분기',
    P.PRODUCT_ID,
    P.PRODUCT_NAME AS '상품명',
    P.PRODUCT_PRICE AS '상품가격',
    SUM(OC.ORDERCONTENT_CNT) AS '판매수량',
    SUM(P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT) AS '상품매출'
FROM 
    kod.ORDERLIST OL
JOIN 
    kod.ORDERCONTENT OC ON OL.ORDERLIST_ID = OC.ORDERLIST_ID
JOIN 
    kod.PRODUCT P ON OC.PRODUCT_ID = P.PRODUCT_ID
GROUP BY 
    YEAR(OL.ORDERLIST_DATE),
    QUARTER(OL.ORDERLIST_DATE),
    P.PRODUCT_ID,
    P.PRODUCT_NAME,
    P.PRODUCT_PRICE
ORDER BY 
    YEAR(OL.ORDERLIST_DATE),
    QUARTER(OL.ORDERLIST_DATE),
    `상품매출` DESC;
    
    
    
-- 년도별 상품매출 순위
SELECT 
    YEAR(OL.ORDERLIST_DATE) AS `년`,
    P.PRODUCT_ID,
    P.PRODUCT_NAME AS '상품명',
    P.PRODUCT_PRICE AS `상품가격`,
    SUM(OC.ORDERCONTENT_CNT) AS `판매수량`,
    SUM(P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT) AS `상품매출 합계`
FROM 
    kod.ORDERLIST OL
JOIN 
    kod.ORDERCONTENT OC ON OL.ORDERLIST_ID = OC.ORDERLIST_ID
JOIN 
    kod.PRODUCT P ON OC.PRODUCT_ID = P.PRODUCT_ID
GROUP BY 
    YEAR(OL.ORDERLIST_DATE),
    P.PRODUCT_ID,
    P.PRODUCT_NAME,
    P.PRODUCT_PRICE
ORDER BY 
    YEAR(OL.ORDERLIST_DATE),
    `상품매출 합계` DESC;
    


-- 일매출 for 30days
SELECT 
    YEAR(ol.ORDERLIST_DATE) AS 년,
    MONTH(ol.ORDERLIST_DATE) AS 월,
    DAY(ol.ORDERLIST_DATE) AS 일,
    SUM(oc.ORDERCONTENT_CNT * p.PRODUCT_PRICE) AS 일매출
FROM 
    ORDERLIST ol
INNER JOIN 
    ORDERCONTENT oc ON ol.ORDERLIST_ID = oc.ORDERLIST_ID
INNER JOIN 
    PRODUCT p ON oc.PRODUCT_ID = p.PRODUCT_ID
WHERE 
    ol.ORDERLIST_DATE >= CURDATE() - INTERVAL 29 DAY 
    AND ol.ORDERLIST_DATE < CURDATE() + INTERVAL 1 DAY
GROUP BY 
    YEAR(ol.ORDERLIST_DATE),
    MONTH(ol.ORDERLIST_DATE),
    DAY(ol.ORDERLIST_DATE);
    
    
    
-- 분기매출 for 2years
SELECT 
    YEAR(ol.ORDERLIST_DATE) AS 년,
    QUARTER(ol.ORDERLIST_DATE) AS 분기,
    SUM(oc.ORDERCONTENT_CNT * p.PRODUCT_PRICE) AS 분기매출
FROM 
    ORDERLIST ol
INNER JOIN 
    ORDERCONTENT oc ON ol.ORDERLIST_ID = oc.ORDERLIST_ID
INNER JOIN 
    PRODUCT p ON oc.PRODUCT_ID = p.PRODUCT_ID
WHERE
    ol.ORDERLIST_DATE >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR)
GROUP BY 
    YEAR(ol.ORDERLIST_DATE),
    QUARTER(ol.ORDERLIST_DATE)
ORDER BY
    YEAR(ol.ORDERLIST_DATE),
    QUARTER(ol.ORDERLIST_DATE);
    
    
    
-- 1년 간의 월매출
SELECT 
    YEAR(ol.ORDERLIST_DATE) AS 년,
    MONTH(ol.ORDERLIST_DATE) AS 월,
    SUM(oc.ORDERCONTENT_CNT * p.PRODUCT_PRICE) AS 월매출
FROM 
    ORDERLIST ol
INNER JOIN 
    ORDERCONTENT oc ON ol.ORDERLIST_ID = oc.ORDERLIST_ID
INNER JOIN 
    PRODUCT p ON oc.PRODUCT_ID = p.PRODUCT_ID
WHERE 
    ol.ORDERLIST_DATE >= DATE_FORMAT(CURDATE() - INTERVAL 11 MONTH, '%Y-%m-01') 
    AND ol.ORDERLIST_DATE < DATE_FORMAT(CURDATE() + INTERVAL 1 MONTH, '%Y-%m-01')
GROUP BY 

    YEAR(ol.ORDERLIST_DATE),
    MONTH(ol.ORDERLIST_DATE);
    
    
    
-- 어제오늘 주문건수
SELECT
    SUM(IF(DATE(ORDERLIST_DATE) = CURDATE(), 1, 0)) AS 오늘주문건수,
    SUM(IF(DATE(ORDERLIST_DATE) = DATE_SUB(CURDATE(), INTERVAL 1 DAY), 1, 0)) AS 어제주문건수
FROM ORDERLIST;
    
    
    

-- 쿠폰코드로 쿠폰조회
SELECT COUPON_ID, 
			 COUPON_CONTENT, 
			 COUPON_DISCOUNT_RATE, 
			 COUPON_NAME, 
			 COUPON_CODE, 
			 COUPON_USE_DATE, 
			 COUPON_TYPE 
			 FROM COUPON 
			 WHERE COUPON_CODE='26TLKRBY1FBPKK3U';
             
-- 등급별 회원조회
SELECT MEMBER_ID,MEMBER_GRADE,MEMBER_NAME FROM MEMBER WHERE MEMBER_GRADE='VIP';
    
    
    
    
    
    
    
    
    
    
    
-- 분기 통계
SELECT 
    SALES_STATISTICS.YEAR AS '년',
    SALES_STATISTICS.QUARTER AS '분기', 
    SALES_STATISTICS.PRODUCT_ID as '상품ID',
    SALES_STATISTICS.PRODUCT_NAME AS '상품명',
    SALES_STATISTICS.PRODUCT_PRICE AS '상품가격',
    SALES_STATISTICS.PRODUCT_SALES_QUANTITY AS '판매수량',
    SALES_STATISTICS.PRODUCT_SALES_REVENUE AS '상품매출',
    QUARTER_AVENUE.QUARTER_AVENUE AS '분기매출'
FROM (
    SELECT 
        YEAR(OL.ORDERLIST_DATE) AS 'YEAR',
        QUARTER(OL.ORDERLIST_DATE) AS 'QUARTER',
        P.PRODUCT_ID,
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE,
        SUM(OC.ORDERCONTENT_CNT) AS 'PRODUCT_SALES_QUANTITY',
        SUM((P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT) - (P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT * C.COUPON_DISCOUNT_RATE / 100)) AS 'PRODUCT_SALES_REVENUE'
    FROM 
        ORDERLIST OL
    JOIN 
        ORDERCONTENT OC ON OL.ORDERLIST_ID = OC.ORDERLIST_ID
    JOIN 
        PRODUCT P ON OC.PRODUCT_ID = P.PRODUCT_ID
    LEFT JOIN 
        COUPON C ON OC.COUPON_ID = C.COUPON_ID
    GROUP BY 
        YEAR(OL.ORDERLIST_DATE),
        QUARTER(OL.ORDERLIST_DATE),
        P.PRODUCT_ID,
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE
) AS SALES_STATISTICS
JOIN (
    SELECT 
        YEAR(OL.ORDERLIST_DATE) AS 'YEAR',
        QUARTER(OL.ORDERLIST_DATE) AS 'QUARTER',
        SUM(P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT) AS 'QUARTER_AVENUE'
    FROM 
        ORDERLIST OL
    JOIN 
        ORDERCONTENT OC ON OL.ORDERLIST_ID = OC.ORDERLIST_ID
    JOIN 
        PRODUCT P ON OC.PRODUCT_ID = P.PRODUCT_ID
    GROUP BY 
        YEAR(OL.ORDERLIST_DATE),
        QUARTER(OL.ORDERLIST_DATE)
) AS QUARTER_AVENUE ON SALES_STATISTICS.YEAR = QUARTER_AVENUE.YEAR AND SALES_STATISTICS.QUARTER = QUARTER_AVENUE.QUARTER
ORDER BY 
    SALES_STATISTICS.YEAR DESC,
    SALES_STATISTICS.QUARTER,
    SALES_STATISTICS.PRODUCT_SALES_REVENUE DESC;
    
    
    
    
    
    
    
    
    
    
    
-- 분기 통계
SELECT 
    SALES_STATISTICS.YEAR AS '년',
    SALES_STATISTICS.QUARTER AS '분기', 
    SALES_STATISTICS.PRODUCT_ID as '상품ID',
    SALES_STATISTICS.PRODUCT_NAME AS '상품명',
    SALES_STATISTICS.PRODUCT_PRICE AS '상품가격',
    SALES_STATISTICS.PRODUCT_SALES_QUANTITY AS '판매수량',
    FLOOR(SALES_STATISTICS.PRODUCT_SALES_REVENUE) AS '상품매출',
    QUARTER_AVENUE.QUARTER_AVENUE AS '분기매출'
FROM (
    SELECT 
        YEAR(OL.ORDERLIST_DATE) AS 'YEAR',
        QUARTER(OL.ORDERLIST_DATE) AS 'QUARTER',
        P.PRODUCT_ID,
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE,
        SUM(OC.ORDERCONTENT_CNT) AS 'PRODUCT_SALES_QUANTITY',
        SUM((P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT) - (P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT * IFNULL(C.COUPON_DISCOUNT_RATE, 1) / 100)) AS 'PRODUCT_SALES_REVENUE'
    FROM 
        ORDERLIST OL
    JOIN 
        ORDERCONTENT OC ON OL.ORDERLIST_ID = OC.ORDERLIST_ID
    JOIN 
        PRODUCT P ON OC.PRODUCT_ID = P.PRODUCT_ID
    LEFT JOIN 
        COUPON C ON OC.COUPON_ID = C.COUPON_ID
    GROUP BY 
        YEAR(OL.ORDERLIST_DATE),
        QUARTER(OL.ORDERLIST_DATE),
        P.PRODUCT_ID,
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE
) AS SALES_STATISTICS
JOIN (
    SELECT 
        YEAR(OL.ORDERLIST_DATE) AS 'YEAR',
        QUARTER(OL.ORDERLIST_DATE) AS 'QUARTER',
        SUM(FLOOR(P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT)) AS 'QUARTER_AVENUE'
    FROM 
        ORDERLIST OL
    JOIN 
        ORDERCONTENT OC ON OL.ORDERLIST_ID = OC.ORDERLIST_ID
    JOIN 
        PRODUCT P ON OC.PRODUCT_ID = P.PRODUCT_ID
    LEFT JOIN 
        COUPON C ON OC.COUPON_ID = C.COUPON_ID
    GROUP BY 
        YEAR(OL.ORDERLIST_DATE),
        QUARTER(OL.ORDERLIST_DATE)
) AS QUARTER_AVENUE ON SALES_STATISTICS.YEAR = QUARTER_AVENUE.YEAR AND SALES_STATISTICS.QUARTER = QUARTER_AVENUE.QUARTER
ORDER BY 
    SALES_STATISTICS.YEAR DESC,
    SALES_STATISTICS.QUARTER,
    SALES_STATISTICS.PRODUCT_SALES_REVENUE DESC;
    
    
    
    
-- 분기 통계
SELECT 
    SALES_STATISTICS.YEAR AS '년',
    SALES_STATISTICS.QUARTER AS '분기', 
    SALES_STATISTICS.PRODUCT_ID as '상품ID',
    SALES_STATISTICS.PRODUCT_NAME AS '상품명',
    SALES_STATISTICS.PRODUCT_PRICE AS '상품가격',
    SALES_STATISTICS.PRODUCT_SALES_QUANTITY AS '판매수량',
    FLOOR(SALES_STATISTICS.PRODUCT_SALES_REVENUE) AS '상품매출'
FROM (
    SELECT 
        YEAR(OL.ORDERLIST_DATE) AS 'YEAR',
        QUARTER(OL.ORDERLIST_DATE) AS 'QUARTER',
        P.PRODUCT_ID,
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE,
        SUM(OC.ORDERCONTENT_CNT) AS 'PRODUCT_SALES_QUANTITY',
        SUM((P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT) - (P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT * IFNULL(C.COUPON_DISCOUNT_RATE, 1) / 100)) AS 'PRODUCT_SALES_REVENUE'
    FROM 
        ORDERLIST OL
    JOIN 
        ORDERCONTENT OC ON OL.ORDERLIST_ID = OC.ORDERLIST_ID
    JOIN 
        PRODUCT P ON OC.PRODUCT_ID = P.PRODUCT_ID
    LEFT JOIN 
        COUPON C ON OC.COUPON_ID = C.COUPON_ID
    GROUP BY 
        YEAR(OL.ORDERLIST_DATE),
        QUARTER(OL.ORDERLIST_DATE),
        P.PRODUCT_ID,
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE
) AS SALES_STATISTICS
ORDER BY 
    SALES_STATISTICS.YEAR DESC,
    SALES_STATISTICS.QUARTER,
    SALES_STATISTICS.PRODUCT_SALES_REVENUE DESC;
    
    
    SELECT 
    SALES_STATISTICS.YEAR AS '년',
    SALES_STATISTICS.QUARTER AS '분기', 
    SUM(SALES_STATISTICS.상품매출) AS '분기매출'
FROM (
    SELECT 
        YEAR(OL.ORDERLIST_DATE) AS 'YEAR',
        QUARTER(OL.ORDERLIST_DATE) AS 'QUARTER',
        P.PRODUCT_ID,
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE,
        FLOOR(SUM((P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT) - (P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT * IFNULL(C.COUPON_DISCOUNT_RATE, 1) / 100))) AS '상품매출'
    FROM 
        ORDERLIST OL
    JOIN 
        ORDERCONTENT OC ON OL.ORDERLIST_ID = OC.ORDERLIST_ID
    JOIN 
        PRODUCT P ON OC.PRODUCT_ID = P.PRODUCT_ID
    LEFT JOIN 
        COUPON C ON OC.COUPON_ID = C.COUPON_ID
    GROUP BY 
        YEAR(OL.ORDERLIST_DATE),
        QUARTER(OL.ORDERLIST_DATE),
        P.PRODUCT_ID,
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE
) AS SALES_STATISTICS
GROUP BY 
    SALES_STATISTICS.YEAR,
    SALES_STATISTICS.QUARTER
ORDER BY 
    SALES_STATISTICS.YEAR DESC,
    SALES_STATISTICS.QUARTER;
    
    
    
    
    
    
    
SELECT 
    SALES_STATISTICS.YEAR AS '년',
    SALES_STATISTICS.QUARTER AS '분기', 
    SALES_STATISTICS.PRODUCT_ID AS '상품ID',
    SALES_STATISTICS.PRODUCT_NAME AS '상품명',
    SALES_STATISTICS.PRODUCT_PRICE AS '상품가격',
    SALES_STATISTICS.PRODUCT_SALES_QUANTITY AS '상품 판매수량',
    FLOOR(SALES_STATISTICS.PRODUCT_SALES_REVENUE) AS '상품매출',
    QUARTERLY_SALES.QUARTERLY_REVENUE AS '분기매출'
FROM (
    SELECT 
        YEAR(OL.ORDERLIST_DATE) AS 'YEAR',
        QUARTER(OL.ORDERLIST_DATE) AS 'QUARTER',
        P.PRODUCT_ID,
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE,
        SUM(OC.ORDERCONTENT_CNT) AS 'PRODUCT_SALES_QUANTITY',
        SUM((P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT) - (P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT * IFNULL(C.COUPON_DISCOUNT_RATE, 1) / 100)) AS 'PRODUCT_SALES_REVENUE'
    FROM 
        ORDERLIST OL
    JOIN 
        ORDERCONTENT OC ON OL.ORDERLIST_ID = OC.ORDERLIST_ID
    JOIN 
        PRODUCT P ON OC.PRODUCT_ID = P.PRODUCT_ID
    LEFT JOIN 
        COUPON_STATUS CS ON OC.ORDERCONTENT_ID = CS.ORDERCONTENT_ID
    LEFT JOIN 
        COUPON C ON CS.COUPON_ID = C.COUPON_ID
    GROUP BY 
        YEAR(OL.ORDERLIST_DATE),
        QUARTER(OL.ORDERLIST_DATE),
        P.PRODUCT_ID,
        P.PRODUCT_NAME,
        P.PRODUCT_PRICE
) AS SALES_STATISTICS
LEFT JOIN (
    SELECT 
        YEAR(OL.ORDERLIST_DATE) AS 'YEAR',
        QUARTER(OL.ORDERLIST_DATE) AS 'QUARTER',
        FLOOR(SUM((P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT) - (P.PRODUCT_PRICE * OC.ORDERCONTENT_CNT * IFNULL(C.COUPON_DISCOUNT_RATE, 1) / 100))) AS 'QUARTERLY_REVENUE'
    FROM 
        ORDERLIST OL
    JOIN 
        ORDERCONTENT OC ON OL.ORDERLIST_ID = OC.ORDERLIST_ID
    JOIN 
        PRODUCT P ON OC.PRODUCT_ID = P.PRODUCT_ID
    LEFT JOIN 
        COUPON_STATUS CS ON OC.ORDERCONTENT_ID = CS.ORDERCONTENT_ID
    LEFT JOIN 
        COUPON C ON CS.COUPON_ID = C.COUPON_ID
    GROUP BY 
        YEAR(OL.ORDERLIST_DATE),
        QUARTER(OL.ORDERLIST_DATE)
) AS QUARTERLY_SALES ON SALES_STATISTICS.YEAR = QUARTERLY_SALES.YEAR AND SALES_STATISTICS.QUARTER = QUARTERLY_SALES.QUARTER
ORDER BY 
    SALES_STATISTICS.YEAR,
    SALES_STATISTICS.QUARTER,
    SALES_STATISTICS.PRODUCT_SALES_REVENUE DESC;
    


-- 30days 일간 매출
SELECT  
	YEAR(date_range.date) AS '년', 
	MONTH(date_range.date) AS '월', 
	DAY(date_range.date) AS '일', 
	COALESCE( 
		FLOOR( 
			SUM( 
				CASE 
					WHEN (oc.ORDERCONTENT_CNT * p.PRODUCT_PRICE * IFNULL(c.COUPON_DISCOUNT_RATE, 0) / 100) 
						 > c.COUPON_DISCOUNT_MAX_PRICE 
					THEN 
						(oc.ORDERCONTENT_CNT * p.PRODUCT_PRICE) - c.COUPON_DISCOUNT_MAX_PRICE 
					ELSE 
						(oc.ORDERCONTENT_CNT * p.PRODUCT_PRICE)  
						 - (oc.ORDERCONTENT_CNT * p.PRODUCT_PRICE * IFNULL(c.COUPON_DISCOUNT_RATE, 0) / 100) 
				END 
			) 
		), 
		0 
	) AS '일간 매출' 
FROM  
	(SELECT CURDATE() - INTERVAL (TEN_DIGIT.i + ONE_DIGIT.i) DAY AS date 
	 FROM 
		 (SELECT 0 AS i UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL 
		  SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS ONE_DIGIT 
	 CROSS JOIN 
		 (SELECT 0 AS i UNION ALL SELECT 10 UNION ALL SELECT 20 UNION ALL SELECT 30) AS TEN_DIGIT) AS date_range 
LEFT JOIN  
	ORDERLIST ol ON DATE(ol.ORDERLIST_DATE) = date_range.date 
LEFT JOIN  
	ORDERCONTENT oc ON ol.ORDERLIST_ID = oc.ORDERLIST_ID 
LEFT JOIN  
	PRODUCT p ON oc.PRODUCT_ID = p.PRODUCT_ID 
LEFT JOIN  
	COUPON_STATUS cs ON oc.ORDERCONTENT_ID = cs.ORDERCONTENT_ID 
LEFT JOIN  
	COUPON c ON cs.COUPON_ID = c.COUPON_ID 
WHERE  
	date_range.date >= CURDATE() - INTERVAL 29 DAY  
	AND date_range.date < CURDATE()+1 
GROUP BY  
	YEAR(date_range.date), 
	MONTH(date_range.date), 
	DAY(date_range.date) 
ORDER BY  
	YEAR(date_range.date), 
	MONTH(date_range.date), 
	DAY(date_range.date);
